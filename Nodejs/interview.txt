1.Mention some default package available inside the Nodejs?
os
path
fs/promises
http 
2.Mention few benefits of expressjs
Make nodejs development fast and easy 
middleware modules is available 
route is available 
east to integrate with template engine 
error handling middleware 
easy to connect with database 
easy to serve static files 
3.What is middleware?
//middleware act like a intermediate between the controller and frontend response 
//It helps to add more mechanism to check incoming request object and to process it in each stage.
//middleware will act like chaining of multiple middleware together till it reaches the controller 
//middleware consists of req object and next object. 
practical example:
Login process 
//validation-->will check email -->will compare password by using bcrypt-->jwt token --> send the response.
4.How you will pass data from one middleware to another middleware?
pass through the req objects
5.What is validation you have used inside the nodejs application for incoming request.
third party package: joi 
5.What is JWT?
Frontend application and backend application is running separately
After login process backend will send jwt token with they will attach some specific details inside the token to verify the specific user along with expire time.
After login each api that is coming from frontend to backend. The backend will check token is valid and the particular user has authorize access means it will give the data to frontend.
Main aim of token is to verify the frontend user after login process. 
6.How you will do error handling in backend?
Passing the error to next(error) object and attaching the error middleware at the end of the express application.
7.What is projections?
showing user the needed data, not all data
8.How to delete all document inside the collection.Tell the query in mongoose.
deletemany({})
9.What is refresh token and how it will work?
//for retrieving new access tokens without requiring the user to perform  login again.
//For security purpose will keep expire time very much minimum.
login process ---> auth token - 5mins
                   refresh token-->store inside the database - 24hours

login--> any api call-->interceptor will check expire time -->refresh token api will be called -->it will verify refresh from database --> then generate new token for frontend.
10.What is route in expressjs?
//To handle different controller for incoming request.
//Different path we can navigate by using url string so it helps to identify the right controller for that particular url string.

11.How you will parse the data in expressjs application?
body-parser 
express - parser 

12.What is template engine?
1.server side rendering
2.it return html page from the backend
3.we can bind dynamic data inside the html page.
/////////////////////////////////////////////////////////////////////////////////
1.How to generate unique key apart from _id?
//we can use shortid third party package to generate alphumeric values.
2.How to store unique data inside the database?
//we can use unique schema option inside mongoose to allow only unique data.
3.How you will store date inside the database?
//we have type:Date property to store the date inside the database
4.What is MVC pattern?
model - M  - Data formation
view - V - html/template engine
controller - c (business logic is written)
//To decouple application 
5.How you will save the data inside the database?
//save method is available inside the mongoose to save the data inside the database.
6.What is the return response from mongoose method?
//return response from mongoose method will be promise.
7.How you will send the json response to frontend from backend or express?
//json method is available to send json data to frontend.
8.How you will handle promise?
//Using async/await.
9.How you will filter the data from mongodb
//using find Method we can able to filter the data
10.How you will filter only one document inside the database 
//findOne method.
11.mongoose query:
//save()
//find()
//findOne()
//findOneAndUpdate()
//deleteOne()
//deleteMany()
//count()
//skip()
//limit()
//projection()
//$lt 
//$gt 
//$eq 
//$in 
//$and 
//$or 
///////////////////////////////////////////////////////////////////////////////